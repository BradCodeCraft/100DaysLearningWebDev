Simple JSX Element
    React uses a syntax extension of JS called JSX that allows you to write HTML within JS.
        Benefits:
            Let you use the full programmatic power of JS within HTML
            Helps to keep your code readable

    Write JS codes in curly braces within JSX:
        { ____ }

    Use transpiler Babel to compile JSX code into JS

    ReactDOM.render(JSX, document.getElementById('root'))
        This places your JSX into React's own lightweight representation of the DOM

Complex JSX Element:
    Nested JSX must return a single element
        One parent element would wrap all of the other levels of nested element

Add Comments in JSX
    You use the syntax {/* ____ */}

Render HTML Elements to the DOM
    ReactDOM offers a simple method to render Rect elements to the DOM which looks like this:
        ReactDOM.render(componentToRender, targetNode)

        ReactDOM.render() must be called after the JSX element declarations

Define an HTML Class in JSX
    In JSX, you can no longer use the word "class" to define HTML classes.
        Instead, JSX uses "className"
    Naming connvention for all HTML attributes and event references in JSX become camelCase.
    
Self-Closing JSX Tags
    Any JSX element can be written with a self-closing tag, and every element must be closed.
        e.g.:
            <br />
            <hr />
            <div />
    The differnce is that in the first syntax version, there is no way to include anything in the <div />

Create a Stateless Functional Component
    There are two ways to create a React component.
        Using JS function
            Defining a component in this wway creates a stateless functional component.
                i.e., component that can receive data and render it, but does not manage or track changes to that data.
            To create a component with a function, you simply write a JS function that returns either JSX or null
            React requires your function name to begin with a capital letter
            
            Because a JSX component represents HTML, you could put several components together to create a more complex HTML page.
                It allows you to compose your UI from many separate, isolated components.
                This makes it easier to build and maintain complex user interfaces/

Create a React Component
    The other way to define a React component is with the ES6 "class" syntax.
        class ____ extends React.Component {
            constructor(props) {
                super(props);
            }
        }
            "super()" calls the constructor of the parent class, i.e. React.Component.

Create a Component with Composition
    To compose components together, you could create an "App" parent component which renders each of these three components as children.
    To render a component as a child in a React component, you include the component name written as a custom HTML tag in the JSX.
        e.g.:
            return (
                <App>
                    <Navbar />
                    <Dashboard />
                    <Footer />
                </App>
            )
        When React encounters a custom HTML tag that references another component, it renders the markup for that component in the location of the tag.
            This should illustrate the parent/child relationship between the parent component and child components

Use React to Render Nested Components
    Component composition is one of React's powerful features.
        When you work with React, it is important to start thinking about your use interface in terms of components.
        You break down your UI into its basic building blocks, and those pieces become the components.
            This helps to separate the code responsible for the UI from the code responsible for handling your application logic.
            It can greatly simplify the development and maintenance of complex projects.

Compose React Components
    You can render JSX elements, stateless functional components, and ES6 class components within other components.

Render a Clas Component to the DOM
    For React components, you need to use the same syntax as if you were rendering a nested component.
        e.g.: ReactDOM.render(<ComponentToRender />, targetNode)
            You use this syntax for both ES6 class components and functional components.

Write a React Component from Scratch
    A typical React component is an ES6 "class" that extend "React.component".
        It has a render method that returns HTML (from JSX) or "null".
    e.g.:
        class ____ extends React.Component {
            constructor(____) {
                super(____);
            }
            render() {
                return (
                    ____ (HTML)
                )
            }
        }

Pass Props to a Stateless Functional Component
    In React, you can pass props, or properties, to child components.
    You use custom HTML attributes created by You and supported by React to be passed to the component.
    It is standard to call this value props and when dealing with stateless functional components, you basically consider it as an argument to a function which returns JSX.

Pass an Array as Props
    To pass an array to a JSX element, it must be treated as JavaScript and wrapped in curly braces.
        e.g.:
            <ParentComponent>
                <ChildComponent colors={["green", "blue", "red"]} />
            <ParentComponent>
    Array methods such as 'join()' can be used when accessing hte property.
        e.g.:
            const ChildComponent = (prop) => <p>{props.colors.join(", ")}</p>
            => <p>green, blue, red</p>

Use Default Props
    You can assign default props to a component as a property onm the component itself and React assigns the default prop if necessary.
        This allows you to specify what a prop value should be if no value is explicitly provided.
            e.g.: MyComponent.defaultProps = {location: 'San Francisco'}
        React assigns default props if props are undefined, but if you pass 'null' as the value for a prop, it will remain 'null'.

Override Default Props
    The way to override the default props is to explicitly set the prop values for a component.

Use PropTypes to Define the Props You Expect
    React provides usefulf type-checking features to verify that components receive props of the correct type.
        You can set 'propTypes' on your component to require the data to be of type 'array'
            This will throw a useful warning when the data is of any other type.
    It's considered a best practice to set propTypes when you know the type ofa prop ahead of time.
        You can define a propTypes property for a componentin the same way you defined defaultProps.
            Doing this will check that props of a given key are present with a given type.
        e.g.: 
            Component.propTypes = {handleClick: PropTypes.func.isRequired}
                PropTypes.func checks that handleClick is a function
                isRequired tells React that handleClick is a required property for that component.
                    You will see a awarning if that prop isn't provided. 
        Among the seven JS primitive types, function and boolean are the only two that use unusual spelling.
            func for function
            bool for boolean

Access Props Using this.props
    The ES6 class component uses a slightly different convention to access props.
    Anytime you refear to a class component within itself, you use the 'this' keyword.
        To access props within a class component, you preface the code that you use to access it with 'this'.
            e.g.: if an ES6 class component has a prop called "data", you write {this.props.data} in JSX.

Review Using Props with Stateless Functional Components
    Stateless functional components act like pure functions.
        They accept props as input and return the same view every time they are passed the same props.
    A "stateless functional component" is any function you write which accepts props and returns JSX.
        A "stateless component", on the other hand, is a class that extends React.Component, but does not use internal state.
        You may see stateful components referred to simply as components or React components.
    A common pattern is to try to minimize statefulness and to create stateless functional components wherever possibble.
        This helps contain your state manaagement to a specific area of your application.
            In turn, this improves development and maintenance of your app by making it easier to follow how changes to state affect its behavior.

Create a Stateful Component
    One of the most important topics in React is "state"
        State consists of any data your application needs to know about, that can change over time.
        You want your apps to respond to state changes and present an updated UI when necessary.
    You create state in a React component by declaring a "state" property on the component class in its "constructor".
        This initializes the component with "state" when it is created.
        The "state" property must be set to a JS "object".
            e.g.: 
            this.state = {
                ____
            }
    You have access to the "state" object throughout the life of your component.
        You can update it, render it in your UI, and pass it as props to child components.
        The "state" objec t can be as complex or as simple as you need it to be.
            Note: you must create a class component by extending 'React.Component' in order to create 'state' like this.