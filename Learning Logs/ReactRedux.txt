Getting Started with React Redux
    Typically, in a React Redux app, you create a single Redux store that manages the state of your entire app.
        Your React components subscribe to only the pieces of data in the store that are relevant to their role.
        Then, you dispatch actions directly from React components, which then trigger store updates.
    Although React components can manage their own state locally, when you have a complex app, it's generally better to keep the app state in a single location with Redux.
        There are exceptions when individual components may have local state specific only to them.
        Finally, because Redux is not designed to wrok with React out of the box, you need to use the 'react-redux' package.
            It provides a way for you to pass Redux 'state' and 'dispatch' to your React components as 'props'.

Manage State Locally First

Extract State Logic to Redux
    You need to move the logic it's performing locally in its 'state' into Redux.
        This is the first step to connect the simple React app to Redux.

Use Provider to Connect Redux to React
    Once you have created a Redux store to handle the messages array and created an action for adding new messages, the next step is to provide React access to the Redux stpre and the actions it needs to dispatch updates.
        React Redux provides its 'react-redux' package to help accomplish these tasks.
    React Redux provides a small API with two key features: 'Provider' and 'connect'.
        The 'Provider' is a wrapper component from React Redux that wraps your React app.
            This wrapper then allows you to access the Redux 'store' and 'dispatch' functions throughout your component tree.
            'Provider' takes two props, the Redux store and the child components of your app.
        Defining the 'Provider' might look like this:
            <Provider store={store}>
                <App/>
            </Provider>