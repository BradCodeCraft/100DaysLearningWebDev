Getting Started with React Redux
    Typically, in a React Redux app, you create a single Redux store that manages the state of your entire app.
        Your React components subscribe to only the pieces of data in the store that are relevant to their role.
        Then, you dispatch actions directly from React components, which then trigger store updates.
    Although React components can manage their own state locally, when you have a complex app, it's generally better to keep the app state in a single location with Redux.
        There are exceptions when individual components may have local state specific only to them.
        Finally, because Redux is not designed to wrok with React out of the box, you need to use the 'react-redux' package.
            It provides a way for you to pass Redux 'state' and 'dispatch' to your React components as 'props'.

Manage State Locally First

Extract State Logic to Redux
    You need to move the logic it's performing locally in its 'state' into Redux.
        This is the first step to connect the simple React app to Redux.

Use Provider to Connect Redux to React
    Once you have created a Redux store to handle the messages array and created an action for adding new messages, the next step is to provide React access to the Redux stpre and the actions it needs to dispatch updates.
        React Redux provides its 'react-redux' package to help accomplish these tasks.
    React Redux provides a small API with two key features: 'Provider' and 'connect'.
        The 'Provider' is a wrapper component from React Redux that wraps your React app.
            This wrapper then allows you to access the Redux 'store' and 'dispatch' functions throughout your component tree.
            'Provider' takes two props, the Redux store and the child components of your app.
        Defining the 'Provider' might look like this:
            <Provider store={store}>
                <App/>
            </Provider>

Map State to Props
    The 'Provider' component allows you to provide 'state' ad 'dispatch' to your React components, but you must specify exactly what state and actions you want.
        This way, you make sure that each component only has access to the state it needs.
            You can accomplish this by creating two functions: 'mapStateToProps()' and 'mapDispatchToProps()'
    In these funcitons, you declare what pieces of state you want to have access to and which action creators you need to be able to dispatch.
        Once these functions are in place, you'll see how to use the React Redux 'connect' method to connect them to your components.

Map Dispatch to Props
    The 'mapDispatchToProps()' function is used to provide specific action creators to your React components so they can dispatch actions against the Redux store.
        It returns an object that maps dispatch actions to property names, which become component 'props'.
        However, instead of returning a piece of 'state', each property retuns a function that calls 'dispatch' with an action creator and any relevant action data.
    You have access to this 'dispatch' because it's passed in to 'mapDispatchToProps()' as a parameter when you define the function.
    E.g.:
        {
            submitLoginUser: function(username) {
                dispatch(loginUser(username))
            }
        }

Connect Redux to React
    The 'connect' method from React Redux can map 'state' and 'dispatch' to the 'props' of one of your React components.
        This method takes two optional arguments, 'mapStateToProps()' and 'mapDispatchToProps()'.
        They are optional because you may have a component that only needs access to 'state' but doesn't need to dispatch any actions, or vice versa.
    To use this method, pass in the functions as arguments, and immediately call the result with your component.
        E.g.: connect(mapStateToProps, mapDispatchToProps)(MyComponent)
    Note: If you want to omit one of the arguments to the 'connect' method, you pass 'null' in its place.

Connect Redux to the Messages App
    'Presentational' generally refers to React components that are not directly connected to Redux.
        They are simply responsible for the presentation of UI and do this as a function of the props they receive.
        By contrast, container components are connected to Redux.
            These are typically responsible for dispatching actions to the store and often pass store state to child components as props.

Moving Forward From Here
    Writing React and Redux code generally requires some configuration.
        This can get complicated quickly.
    If you are interested in experimenting on your own machine, the 'npx create-react-app' comes configured and ready to go.
    Alternatively, you can enable Babel as a JS Preprocessor in CodePen, add React and ReactDOM as external JS resources, and work there as well.
