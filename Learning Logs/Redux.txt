Create a Redux Store
    Redux is a state management framework that can be used with a number of different web technologies, including React.
    In Redux, there is a single state object that's responsible for the entire state of your application.
        This means if you had a React app with ten components, and each component had its own local states, the entire state of your app would be defined by a single state object housed in the Redux 'store'.
            The Redux store is the single source of truth when it comes to application state.
    This also measns that any time any piece of your app wants to update state, it MUST do so through the Redux store.
        The unidirectional data flow makes it easier to track state management in your app.
    There is a method called 'createStore()' on the Redux object, which you use to creaate the Redux 'store'.
        This method takes a 'reducer' function as a required argument.
            A 'reducer' function simply takes 'state' as an argument and returns 'state'

Get State from the Redux Store
    The Redux store object provides several methods that allow you to interact with it.
        E.g.: you can retrieve the current 'state' help in the Redux store object with the 'getState()' method.

Define a Redux Action
    In Redux, all state updates are triggered by dispatching actions.
        An action is simply a JS object that contains information about an action event that has occurred.
        The Redux store receives these action objects, then updates its state accordingly.
    Sometimes a Redux action also carries some data.
        E.g.: the action carries a username after a user logs in.
        While the data is optional, actions must carry a 'type' property that specifies the 'type' of action that occurred.
    Think of Redux actions as messengers that deliver information about events happening in your app to the Redux store.
        The store then conducts the business of updating state based on the action that occurred.

Define an Action Creator
    In Redux, you define action creators to accomplish this.
        An action creator is simply a JS function that returns an action.
        I.e.: action creators create objects that represent action events.

Dispatch an Action Event
    'dispatch' method is what you use to dispatch actions to the Redux store.
        Calling 'store.dispatch()' and passing the value returned from an action creator sends an action back to the store.
    Recall: the action creators return an object with a type property that specifies the type of action that has occurred.
        Then the method dispatches an action object to the Redux store.
        E.g.: store.dispatch(actionCreator()) || store.dispatch({type:'LOGIN'})
    
Handle an Action in the Store
    After an action is created and dispatched, the Redux store needs to know how to respond to that action.
        This is the job of a 'reducer' function.
        Reducers in Redux are responsible for the state modifications that take place in response to actions.
            A 'reducer' takes 'state' sand action as arguments, and it always returns a new 'state'.
        It is important to see that this is the ONLY role of the reducer.
            It has no side effects - it never calls an API endpoint, and it never has any hidden surprises.
            The reducer is simply a pure function taht takes state and action, then returns new state.
    Another key principle in Redux is that 'state' is read-only.
        I.e.: the 'reducer' function must ALWAYS return a new copy of 'state' and never modify state directly.
        Redux does not enforce state immutability, however , you are responsible for enforcing it in the code of your reducer functions.

Use a Switch Statement to Handle Multiple Actions
    You can tell the Redux store how to handle multiple action types.
        E.g.: You want to have a state representation for when users are logged in and when they are logged out.
            You represent this with a single state object with the property 'authenticated'.
        You also need action creators that create actions corresponding to user login and user logout, along with the action objects themselves.

Use const for Action Types
    A common practice when working with Redux is to assign action types as read-only constants, then reference these constants wherever they are used.
        You can refactor the code you're working with to write the action types as 'const' declarations.

Register a Store Listener
    Another method you have access to on the Redux 'store' ivhect us 'store.subscribe()'.
        This allows you to subscribe listener functions to the store, which are called whenever a n action is dispatched against the store.
        One simple use for this method is to subscribe a function to your store that simply logs a message every time an action is received and the store is updated.

Combine Multiple Reducers
    The first principle of Redux: all app state is help in a single state object in the store.
        Therefore, Redux provides reducer composition as a solution for a complex state model.
        You define multiple reducers to handle different pieces of your application's state, then compose these reducers together into one root reducer.
            The root reducer is then passed into the Redux 'createStore()' method.
    In order to let us combine multiple reducers together, Redux provides the 'combineReducers()' method.
        This method accepts an object as an argument in which you define properties which associate keys to specific reducer functions.
        The name you give to the keys will be used by Redux as the name for the associated piece of state.
    Typically, it is a good practice to create a reducer for each piece of application state when they are distinct or unique in some way.
        E.g.: In a note-taking app with user authentication, one reducer could handle authentication while another handles the text and notes that the user is submitting.
            const rootReducer = Redux.combineReducers({
                auth: authenticationReducer,
                notes: notesReducer
            })
            The key 'notes' will contain all of the state associated with our notes and handled by our 'notesReducer'.
                This is how multiple reducers can be composed to manage more complex application state.

Send Action Data to the Store
    You can also send specific data along with your actions.
        This is very common because actions usually originate from some user interaction and tend to carry some data with them.
        The Redux store often needs to know about this data.

Use Middleware to Handle Asynchronous Actions
    Redux provides middleware designed specifically for this purpose, called Redux Thunk middleware.
    To include Redux Thunk middleware, you pass it as an argument to 'Redux.applyMiddleware()'.
        This statement is then provided as a second optional parameter to the 'createStore()' function.
        Then, to create an asynchronous action, you return a function in the action creator that takes 'dispatch' as an argument.
            Within this function, you can dispatch actions and perform asynchronous requests.
    It's common to dispatch an action before initiating any asynchronous behavior so that your application state knows that some data is being requested (e.g.: this state could display a loading icon).
        Then, once you receive the data, you dispatch another aciton which carries the data as a payload along with information that the action is completed.
    Remember: you're passing 'dispatch' as a parameter to this special action creator.
        This is what you'll use to dispatch your actions, you simply pass the action directly to dispatch and the middleware takes care of the rest.

Never Mutate State
    Immutable state means that you never modify state directly, instead, you return a new copy of state.
    If you took a snapshot of the state of a Redux app over time, you would see something like 'state 1', 'state 2', 'state 3', etc. where each state may be similar to the last, but each is a distinct piece of data.
        This immutability, in fact, is what provides such features as time-travel debugging that you may have heard about.
    Redux does not actively enforce s tate immutability in its store or reducers, that responsibility falls on the programmer.
        Fortunately, JS (ES6) provides several useful tools you can use to enforce the immutability of your state, regardless the data type.
            Note: strings and numbers are primitive values and are immutable by nature.
            An 'array' or 'object', however, is mutable.
        In practice, you state will probably consist of an 'array' or 'object' as these are useful data structures for representing many types of information.

Use the Spread Operator on Arrays
    One solution from ES6 to help enforce state immutability in Redux is the spread operator: '...'.
        The spread operator has a variety of applications, one of which is well-suited to the previous challenge of producing a new array from an existing array.
        This is relatively new, but commonly used syntax.
        E.g.: let newArray = [...myArray]
    To clone an array but add additional values in the new array, you could write '[...myArray, 'new value]'.
        This would return a new array composed of the values in 'myArray' and the string 'new value' as the last value.
        The spread syntax can be used multiple times in array composition like this, but it's important to note that it only makes a shallow coppy of the array.
            I.e.: it only provides immutable array operations for one-dimensional arrays.

Remove an Item from an Array

Copy an Object with Object.assign
    The last several challenges worked with arrays, but there are ways to help enforce state immutability when state is an 'object', too.
        A useful tool for handling objects is the 'Object.assign()' utility.
            It takes a target object and source objects and maps properties from the source objects to the target object.
            Any matching properties are overwritten by properties in the source objects.
            This behavior is commonly used to make shallow copies of objects by passing an empty object as the first argument followed by the object(s) you want to copy.
        E.g.: const newObj = Object.assign({}, obj1, obj2);
            This creates 'newObj' as a new 'object', which contains the properties that currently exist in 'obj1' and 'obj2'